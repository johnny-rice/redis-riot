/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2023 The RIOT authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
config {
    info {
        description = 'RIOT'
        inceptionYear = '2020'
        vendor = 'Redis'
        tags = ['redis', 'tool', 'import', 'export', 'replication']

        links {
            website      = "https://github.com/redis/${project.rootProject.name}"
            issueTracker = "https://github.com/redis/${project.rootProject.name}/issues"
            scm          = "https://github.com/redis/${project.rootProject.name}.git"
        }

        scm {
            url                 = "https://github.com/redis/${project.rootProject.name}"
            connection          = "scm:git:https://github.com/redis/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:redis/${project.rootProject.name}.git"
        }

        specification {
            enabled = true
        }

        implementation {
            enabled = true
        }
        
        people {
            clearDomainSet()
            person {
                id    = 'jruaux'
                name  = 'Julien Ruaux'
                roles = ['developer', 'author']
            }
        }
    }

    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
        }
    }
    
    licensing {
        enabled = false
    }

    coverage {
        jacoco {
            enabled = true
            toolVersion = jacocoPluginVersion
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
        // maven {
           // url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        //}
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

subprojects { subproj ->
    if (!subproj.name.contains('guide')) {
    
        config {
	        info {
	            description = project.project_description
	        }
            coverage {
                jacoco {
		            toolVersion = jacocoPluginVersion
                }
            }
	    }

	    license {
	        exclude('build/**')
	    }

	    dependencies {
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'
            testImplementation 'org.junit.jupiter:junit-jupiter-api'
            testImplementation 'org.junit.jupiter:junit-jupiter-params'
            testImplementation 'org.junit.jupiter:junit-jupiter-engine'
            testImplementation 'org.junit.platform:junit-platform-launcher'
            testImplementation 'org.testcontainers:junit-jupiter'
	        testImplementation group: 'com.redis', name: 'testcontainers-redis', version: testcontainersRedisVersion
	    }

	    test {
	        useJUnitPlatform()
	    }

	    configurations {
	        all*.exclude module: 'spring-boot-starter-logging'
	        all*.exclude module: 'commons-logging'
	    }

	    bootJar {
            enabled = false
        }

        jar {
            enabled = true
            archiveClassifier = ''
        }

	}
}

subprojects { p ->
    config {
        coverage {
            jacoco {
                enabled = hasTestsAt(p.file('src/test'))
            }
        }
    }
    
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'lettuce-core' ) {
                details.useVersion lettuceVersion
            }
        }
    }
}

gradleProjects {
    subprojects {
        dirs(['core']) {
            compileJava {
                options.compilerArgs += ["-AprojectPath=${project.group}/${project.name}"]
            }

            if (!(project.findProperty('automatic.module.name.skip') ?: false).toBoolean()) {
                jar {
                    manifest {
                        attributes('Automatic-Module-Name': project.findProperty('automatic.module.name'))
                    }
                }
            }
        }
    }
}

boolean hasTestsAt(File testDir) {
    testDir.exists() && testDir.listFiles()?.size()
}